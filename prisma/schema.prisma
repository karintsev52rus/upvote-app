// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @unique @default(uuid())
  email         String         @unique
  avatar        String?
  password      String
  feedbackPosts FeedbackPost[]
  Upvotes       Upvote[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
}

model FeedbackPost {
  id            String                    @id @unique @default(uuid())
  title         String
  description   String
  author        User                      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String
  categories    FeedbackPostsCategories[]
  status        Status                    @relation(fields: [statusId], references: [id])
  statusId      String
  upvotes       Upvote[]
  upvotesNumber Int                       @default(0)
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @default(now())
}

model Category {
  id            String                    @id @unique @default(uuid())
  name          String
  feedbackPosts FeedbackPostsCategories[]
}

model FeedbackPostsCategories {
  feedbackPost   FeedbackPost @relation(fields: [feedbackPostId], references: [id], onDelete: Cascade)
  feedbackPostId String
  Category       Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId     String

  @@id([feedbackPostId, categoryId])
}

model Status {
  id           String         @unique @default(uuid())
  name         String
  feedbackPost FeedbackPost[]
}

model Upvote {
  id           String       @unique @default(uuid())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  feedbackPost FeedbackPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       String
  createdAt    DateTime     @default(now())
}
